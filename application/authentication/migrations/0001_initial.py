# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-07-14 11:44
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppUserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('mobile', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_mobile', message='Mobile number must have 10 digits', regex='^\\d{10}$')])),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('user_type', models.IntegerField(choices=[(0, ' -- '), (1, 'Doctor'), (2, 'Health Worker'), (3, 'Patient'), (4, 'Medical Representative'), (5, 'Others')], default=1)),
                ('user_status', models.IntegerField(choices=[(1, 'Approval Pending'), (2, 'Approved'), (3, 'Rejected'), (4, 'On Hold')], default=1)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modifile_on', models.DateTimeField(auto_now=True)),
                ('reason_for_modification', models.TextField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('id',),
                'verbose_name': 'application User',
                'verbose_name_plural': 'Appication Users',
            },
        ),
    ]
